spring:
  application:
    name: ${SERVICE_NAME:em-collector}

  docker:
    compose:
      enabled: ${DOCKER_COMPOSE_ENABLED:false}

  # Конфигурация Redis
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:passw0rd}
      timeout: 2000
      database: ${SPRING_DATA_REDIS_DATABASE:0}                                               # Номер БД Redis
      client-name: ${SPRING_DATA_SERVICE_NAME:em-collector}-redis-client                      # Имя клиента для идентификации в Redis


  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all                                                                               # Подтверждение всех реплик (все брокеры должны подтвердить запись сообщения)
      properties:
        enable.idempotence: true                                                              # Включаем идемпотентность (для предотвращения дублирования сообщений)
        max.in.flight.requests.per.connection: 5                                              # Максимальное количество запросов в очереди на одно соединение
        retries: 3                                                                            # Количество попыток повторной отправки сообщения в случае ошибки


server:
  port: ${SERVER_PORT:8080}


management:
  server:
    port: ${ACTUATOR_PORT:8081}
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}                           # Список доступных эндпоинтов
  metrics:
    tags:
      application: ${spring.application.name}                                                   # Имя приложения для метрик
    distribution:
      percentiles-histogram:
        http.server.requests: true                                                              # Гистограмма для метрик HTTP-запросов
  tracing:
    sampling:
      probability: 1.0                                                                          # Трейсинг для всех запросов
  endpoint:
    health:
      show-details: ${HEALTH_DETAILS_VISIBLE:always}                                            # Детализация информации о здоровье сервиса


eureka:
  client:
    register-with-eureka: ${EUREKA_REGISTER_ENABLED:true}                                       # Регистрируем сервис в Eureka
    fetch-registry: ${EUREKA_FETCH_ENABLED:true}                                                # Загружаем список зарегистрированных сервисов
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://em-discovery:8761/eureka/}   # URL-адрес реестра Eureka
  instance:
    prefer-ip-address: ${EUREKA_PREFER_IP:false}                                                # Используем хостнейм вместо IP
    instance-id: ${EUREKA_INSTANCE_HOSTNAME:localhost}:${server.port}:${random.uuid}            # Уникальный идентификатор инстанса
    lease-renewal-interval-in-seconds: ${EUREKA_HEARTBEAT_INTERVAL:30}                          # Частота отправки heartbeat
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRATION:90}                         # Время, через которое инстанс будет считаться недоступным
    health-check-url-path: ${EUREKA_HEALTH_CHECK_PATH:/actuator/health}                         # URL для проверки состояния
    status-page-url-path: ${EUREKA_STATUS_PAGE_PATH:/actuator/info}                             # URL страницы статуса


gdelt:
  client:
    name: gdelt-client
    retry:
      period: ${GDELT_CLIENT_RETRY_PERIOD:1000}                                                 # Начальный интервал между попытками в мс
      max-period: ${GDELT_CLIENT_RETRY_MAX_PERIOD:5000}                                         # Максимальный интервал между попытками в мс
      max-attempts: ${GDELT_CLIENT_RETRY_MAX_ATTEMPTS:3}                                        # Максимальное количество попыток
  api:
    base-url: http://data.gdeltproject.org
    translation-updates-path: /gdeltv2/lastupdate-translation.txt
  storage:
    download-dir: ${GDELT_DOWNLOAD_DIR:./data/gdelt/translation}                                # Директория для загрузки файлов
    extract-dir: ${GDELT_EXTRACT_DIR:./data/gdelt/translation/csv}                              # Директория для распаковки файлов
  retry:
    interval: ${GDELT_RETRY_INTERVAL:300000}                                                    # Интервал между попытками в мс
  check:
    interval: ${GDELT_CHECK_INTERVAL:60000}                                                     # Интервал между проверками в мс


# Топики Kafka
kafka:
  topic:
    producer:
      collector-event: ${KAFKA_TOPIC_COLLECTOR_EVENT:gdelt-collector-event-topic}
      collector-mention: ${KAFKA_TOPIC_MENTION:gdelt-collector-mention-topic}


# Конфигурация MinIO клиента
storage:
  minio:
    endpoint: ${MINIO_ENDPOINT:http://minio:9000}                                                 # URL MinIO сервера (localhost для локального запуска)
    access-key: ${MINIO_ACCESS_KEY:eventmosaic}                                                   # Имя пользователя (из docker-compose)
    secret-key: ${MINIO_SECRET_KEY:eventmosaic}                                                   # Пароль (из docker-compose)
    bucket: ${MINIO_BUCKET:event-mosaic}                                                          # Имя бакета (из docker-compose minio-client)