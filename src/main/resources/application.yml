spring:
  application:
    name: ${SERVICE_NAME:em-collector}

  docker:
    compose:
      enabled: ${DOCKER_COMPOSE_ENABLED:false}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all                                                                               # Подтверждение всех реплик (все брокеры должны подтвердить запись сообщения)
      properties:
        enable.idempotence: true                                                              # Включаем идемпотентность (для предотвращения дублирования сообщений)
        max.in.flight.requests.per.connection: 5                                              # Максимальное количество запросов в очереди на одно соединение
        retries: 3                                                                            # Количество попыток повторной отправки сообщения в случае ошибки


server:
  port: ${SERVER_PORT:8080}


management:
  server:
    port: ${ACTUATOR_PORT:8081}
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}                           # Список доступных эндпоинтов
  metrics:
    tags:
      application: ${spring.application.name}                                                   # Имя приложения для метрик
    distribution:
      percentiles-histogram:
        http.server.requests: true                                                              # Гистограмма для метрик HTTP-запросов
  tracing:
    sampling:
      probability: 1.0                                                                          # Трейсинг для всех запросов
  endpoint:
    health:
      show-details: ${HEALTH_DETAILS_VISIBLE:always}                                            # Детализация информации о здоровье сервиса


eureka:
  client:
    register-with-eureka: ${EUREKA_REGISTER_ENABLED:true}                                       # Регистрируем сервис в Eureka
    fetch-registry: ${EUREKA_FETCH_ENABLED:true}                                                # Загружаем список зарегистрированных сервисов
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://em-discovery:8761/eureka/}   # URL-адрес реестра Eureka
  instance:
    prefer-ip-address: ${EUREKA_PREFER_IP:false}                                                # Используем хостнейм вместо IP
    instance-id: ${EUREKA_INSTANCE_HOSTNAME:localhost}:${server.port}:${random.uuid}            # Уникальный идентификатор инстанса
    lease-renewal-interval-in-seconds: ${EUREKA_HEARTBEAT_INTERVAL:30}                          # Частота отправки heartbeat
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRATION:90}                         # Время, через которое инстанс будет считаться недоступным
    health-check-url-path: ${EUREKA_HEALTH_CHECK_PATH:/actuator/health}                         # URL для проверки состояния
    status-page-url-path: ${EUREKA_STATUS_PAGE_PATH:/actuator/info}                             # URL страницы статуса


# Топики Kafka
kafka:
  topic:
    raw-data: ${KAFKA_TOPIC_RAW_DATA:gdelt-raw-data-topic}